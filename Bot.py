import datetime, sqlite3

from data.CONFIG import TG_API_URL, TG_TOKEN
from telegram import Bot, Update, ParseMode, KeyboardButton, InlineKeyboardButton, \
    InlineKeyboardMarkup, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, \
    CallbackQueryHandler, CallbackContext, ConversationHandler

from os.path import abspath

BUTTON1 = "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê"
BUTTON2 = "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚è∏"
BUTTON3 = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"
BUTTON4 = "–ó–∞–¥–µ—Ä–∂–∫–∞ ‚åõ"
BUTTON5 = "–°–±—Ä–æ—Å üîÅ"
BUTTON6 = "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"
BUTTON7 = "–ú–æ–π —Å—Ç–∞—Ç—É—Å üîê"

CALLBACK_BUTTON_SOS = "callback_button_sos"

conn_path = f'/{abspath("./data/userbase.db")}'


def mini_user_keyboard():
    keyboard = [
        [
            KeyboardButton(BUTTON1),
            KeyboardButton(BUTTON7),
        ],
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
    )


def start_keyboard():
    keyboard = [
        [
            KeyboardButton(BUTTON1),
            KeyboardButton(BUTTON7),
        ],
        [
            KeyboardButton(BUTTON3),
        ],
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
    )


def settings_keyboard():
    keyboard = [
        [
            KeyboardButton(BUTTON2),
        ],
        [
            KeyboardButton(BUTTON4),
            KeyboardButton(BUTTON5),
        ],
        [
            KeyboardButton(BUTTON6),
        ],
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
    )


def do_start(bot: Bot, update: Update):
    is_exists = check_id(update.message.chat_id)
    if not is_exists:
        bot.send_message(
            chat_id=update.message.chat_id,
            text="–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –∏ –∫–æ–¥",
        )
    elif is_exists:
        bot.send_message(
            chat_id=update.message.chat_id,
            text="–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            reply_markup=ReplyKeyboardRemove(),
        )

        conn = sqlite3.connect(conn_path)
        cur = conn.cursor()
        sql = f"UPDATE user SET chat_id_telegram = 'Null' WHERE chat_id_telegram = '{update.message.chat_id}'"
        cur.execute(sql)
        conn.commit()
        conn.close()


def check_id(chat_id):
    conn = sqlite3.connect(conn_path)
    cur = conn.cursor()
    query = f"SELECT * FROM user WHERE chat_id_telegram='{chat_id}'"
    person = bool(cur.execute(query).fetchall())
    conn.close()
    return person


def check_user_type(chat_id):
    conn = sqlite3.connect(conn_path)
    cur = conn.cursor()
    query = f"SELECT user_type FROM user WHERE chat_id_telegram='{chat_id}'"
    user_type = cur.execute(query).fetchone()
    conn.close()
    return user_type[0]


def do_help(bot: Bot, update: Update):
    bot.send_message(
        chat_id=update.message.chat_id,
        text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê\n(–í—ã–≤–æ–¥–∏—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)\n\n"
             "–ú–æ–π —Å—Ç–∞—Ç—É—Å üîê\n(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π —É –Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å (—É—Ä–µ–∑–∞–Ω–Ω—ã–π, –æ–±—ã—á–Ω—ã–π –∏–ª–∏ –∞–¥–º–∏–Ω))\n\n"
             "–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞:\n"
             "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚è∏\n(–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ n –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥)\n\n"
             "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô\n(–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)\n\n"
             "–ó–∞–¥–µ—Ä–∂–∫–∞ ‚åõ\n(–£–∫–∞–∑—ã–≤–∞–µ—Å—Ç—è –≤—Ä–µ–º—è –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –≤ fps)\n\n"
             "–°–±—Ä–æ—Å üîÅ\n(–°–±—Ä–æ—Å –¥–æ –∑–∞–≤–æ–¥—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫)\n\n"
             "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è\n(–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)",
    )


def do_echo(bot: Bot, update: Update):
    is_exists = check_id(update.message.chat_id)
    if not is_exists:
        text = update.message.text
        conn = sqlite3.connect(conn_path)
        cur = conn.cursor()
        query = f"SELECT * FROM user WHERE username='{text.split()[0]}' AND telegram_key='{text.split()[1]}'"
        user_is_exist = bool(cur.execute(query).fetchall())
        conn.close()
        if user_is_exist:
            updater_id(update.message.chat_id, text.split()[0], text.split()[1]),
            user_type = check_user_type(update.message.chat_id)
            if user_type == 1:
                bot.send_message(
                    chat_id=update.message.chat_id,
                    text="–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ!",
                    reply_markup=start_keyboard(),
                ),
            elif user_type == 2:
                bot.send_message(
                    chat_id=update.message.chat_id,
                    text="–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ!",
                    reply_markup=mini_user_keyboard(),
                ),
            is_exists = True
        if not is_exists:
            bot.send_message(
                chat_id=update.message.chat_id,
                text="üò¢–Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µüò≠ ",
            )
    elif is_exists:
        text = update.message.text
        user_type = check_user_type(update.message.chat_id)
        if text == BUTTON1:
            update.message.reply_text(
                text="http://127.0.0.1:5000",
            )
        elif text == BUTTON2 and user_type == 1:
            update.message.reply_text(
                text="–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç!",
            )
        elif text == BUTTON3 and user_type == 1:
            update.message.reply_text(
                text="–° –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /help",
                reply_markup=settings_keyboard(),
            )
        elif text == BUTTON4 and user_type == 1:
            pass
        elif text == BUTTON5 and user_type == 1:
            pass
        elif text == BUTTON6 and user_type == 1:
            update.message.reply_text(
                text="–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
                reply_markup=start_keyboard(),
            )
        elif text == BUTTON7:
            if user_type == 1:
                status = 'admin'
            elif user_type == 2:
                status = 'user'
            bot.send_message(
                chat_id=update.message.chat_id,
                text=f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {status} \n",
            )
        elif user_type == 1:
            bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞!",
                reply_markup=start_keyboard(),
            )
        elif user_type == 2:
            bot.send_message(
                chat_id=update.message.chat_id,
                text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞!",
                reply_markup=mini_user_keyboard(),
            )


def send_image(path):
    bot = Bot(
        token=TG_TOKEN,
        base_url=TG_API_URL,
    )
    conn = sqlite3.connect(conn_path)
    cur = conn.cursor()
    query = f"SELECT chat_id_telegram FROM user"
    all_users_id = cur.execute(query).fetchall()
    conn.close()
    for user_id in all_users_id:
        for id in user_id:
            try:
                bot.send_photo(
                    chat_id=id,
                    photo=open(path, 'rb'),
                )
            except Exception as e:
                print(e)


def updater_id(chat_id, login_data, code_data):
    conn = sqlite3.connect(conn_path)
    cur = conn.cursor()
    sql = f"UPDATE user SET chat_id_telegram = '{chat_id}' WHERE username = '{login_data}' AND telegram_key = '{code_data}'"
    cur.execute(sql)
    conn.commit()
    conn.close()


def main():
    bot = Bot(
        token=TG_TOKEN,
        base_url=TG_API_URL,
    )
    updater = Updater(
        bot=bot,
    )

    start_handler = CommandHandler("start", do_start)
    help_handler = CommandHandler("help", do_help)
    reg_handler = MessageHandler(Filters.text, do_echo)

    updater.dispatcher.add_handler(start_handler)
    updater.dispatcher.add_handler(help_handler)
    updater.dispatcher.add_handler(reg_handler)

    # –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    updater.start_polling()
    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    updater.idle()


if __name__ == '__main__':
    main()
