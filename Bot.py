from os.path import abspath
from os import makedirs
from os.path import exists

import sqlite3
import telebot

from data.CONFIG import TG_TOKEN

cam = None
link = '127.0.0.1:5000'
bot = telebot.TeleBot(TG_TOKEN)
conn_path = f'/{abspath("./data/userbase.db")}'

SiteButton = "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê"
PathButton = "–ü—É—Ç—å üìÇ"
SettingsButton = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"
MinAreaButton = "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å üî¨"
MaxAreaButton = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å üî≠"
BackButton = "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"
StatusButton = "–ú–æ–π —Å—Ç–∞—Ç—É—Å üîê"
LogoutButton = "–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã üö™"
SizeButton = "–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñº"

min_user_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
min_user_keyboard.row(SiteButton, StatusButton)
min_user_keyboard.row(LogoutButton)

user_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
user_keyboard.row(SiteButton, StatusButton)
user_keyboard.row(LogoutButton)
user_keyboard.row(SettingsButton)

settings_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
settings_keyboard.row(PathButton)
settings_keyboard.row(MinAreaButton, MaxAreaButton)
settings_keyboard.row(SizeButton)
settings_keyboard.row(BackButton)


# start command
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ /login, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!')


# bot
@bot.message_handler(commands=['help'])
def do_help(message):
    bot.send_message(message.chat.id,
                     "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê\n(–í—ã–≤–æ–¥–∏—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)\n\n"
                     "–ú–æ–π —Å—Ç–∞—Ç—É—Å üîê\n(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ª–æ–≥–∏–Ω –∏ —Å—Ç–∞—Ç—É—Å (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ –∞–¥–º–∏–Ω))\n\n"
                     "–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã üö™\n(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ–±—ã –∑–∞–π—Ç–∏ –ø–æ–¥ –¥—Ä—É–≥–æ–π —É—á—ë—Ç–Ω–æ–π "
                     "–∑–∞–ø–∏—Å—å—é)\n\n"
                     "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô\n(–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–æ–ª—å–∫–æ –¥–ª—è "
                     "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n\n"
                     "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è\n(–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)"
                     "–ü—É—Ç—å üìÇ\n(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—É—é –¥–ª—è —Å–µ–±—è –¥–∏—Ä–∏–∫—Ç–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è "
                     "–∫–∞–¥—Ä—ã)\n\n"
                     "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å üî¨\n(–¢–∞ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–µ–Ω–µ–±—Ä–µ–≥–∞—Ç—å —Å–∏—Å—Ç–µ–º–∞)\n\n"
                     "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å üî≠\n(–ü–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏ )\n\n",
                     )


def check_id_and_user_type(chat_id):
    conn = sqlite3.connect(conn_path)
    cur = conn.cursor()
    query = f"SELECT username, user_type FROM user WHERE chat_id_telegram='{chat_id}'"
    name_and_type = cur.execute(query).fetchone()
    conn.close()
    return name_and_type


# echo function
@bot.message_handler(content_types=['text'])
def send_text(message):
    is_exists = check_id_and_user_type(message.chat.id)
    if bool(is_exists):
        if message.text == SiteButton:
            bot.send_message(message.chat.id, f'–ù–∞–∂–º–∏—Ç–µ {link}, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
        elif message.text == StatusButton:
            if is_exists[1] == 1:
                u_type = 'admin'
            else:
                u_type = 'user'
            bot.send_message(message.chat.id, f'{is_exists[0]}, –í–∞—à —Å—Ç–∞—Ç—É—Å: {u_type}')
        elif message.text == PathButton and is_exists[1] == 1:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–∏—Ä–∏–∫—Ç–æ—Ä–∏–∏")
            bot.register_next_step_handler(message, change_save_path)
        elif message.text == BackButton and is_exists[1] == 1:
            bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", reply_markup=user_keyboard)
        elif message.text == SizeButton and is_exists[1] == 1:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ '—à–∏—Ä–∏–Ω–∞' '–≤—ã—Å–æ—Ç–∞' –≤ –ø–∏–∫—Å–µ–ª—è—Ö")
            bot.register_next_step_handler(message, change_image_size)
        elif message.text == MinAreaButton:
            bot.send_message(message.chat.id, "–û—Ç—Å–µ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–Ω—å—à–∏—Ö –∑–∞–¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö")
            bot.register_next_step_handler(message, change_min_area)
        elif message.text == MaxAreaButton:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ –ø–∏–∫—Å–µ–ª—è—Ö (–Ω–µ —Å–æ–≤–µ—Ç—É–µ—Ç—Å—è –∏–∑–º–µ–Ω—è—Ç—å)")
            bot.register_next_step_handler(message, change_max_area)
        elif message.text == LogoutButton:
            bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                             reply_markup=telebot.types.ReplyKeyboardRemove())
            conn = sqlite3.connect(conn_path)
            cur = conn.cursor()
            sql = f"UPDATE user SET chat_id_telegram = Null WHERE chat_id_telegram = '{message.chat.id}'"
            cur.execute(sql)
            conn.commit()
            conn.close()
        elif message.text == SettingsButton and is_exists[1] == 1:
            bot.send_message(message.chat.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—ã—Ç–∞!', reply_markup=settings_keyboard)
        elif is_exists[1] == 1:
            bot.send_message(message.chat.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—ã—Ç–∞!', reply_markup=user_keyboard)
        elif is_exists[1] == 2:
            bot.send_message(message.chat.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—ã—Ç–∞!', reply_markup=min_user_keyboard)
    elif not bool(is_exists):
        if message.text == '/login':
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–ª–æ–≥–∏–Ω –∏ –∫–ª—é—á)"),
            bot.register_next_step_handler(message, registration)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_name
        else:
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ /login, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!')


def change_save_path(message):
    path = message.text
    try:
        if not exists(path):
            makedirs(path)
        cam.change_parameters(path=path)
        bot.send_message(message.chat.id, f"–ü—É—Ç—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{path}'")
    except Exception as e:
        # print(e)
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∏—Ä–∏–∫—Ç–æ—Ä–∏—é!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...")


def change_image_size(message):
    size = message.text
    try:
        width = size.split()[0]
        height = size.split()[1]
        width = int(width)
        height = int(height)
        cam.change_parameters(width=width, height=height)
    except Exception as e:
        # print(e)
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...")


def change_min_area(message):
    min_area = message.text
    try:
        min_area = int(min_area)
        cam.change_parameters(min_area=min_area)
    except Exception as e:
        # print(e)
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...")


def change_max_area(message):
    max_area = message.text
    try:
        max_area = int(max_area)
        cam.change_parameters(max_area=max_area)
    except Exception as e:
        # print(e)
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...")


def send_image(path):
    conn = sqlite3.connect(conn_path)
    cur = conn.cursor()
    query = f"SELECT chat_id_telegram FROM user"
    all_users_id = cur.execute(query).fetchall()
    conn.close()
    for user_id in all_users_id:
        for ID in user_id:
            try:
                bot.send_photo(ID, open(abspath(path), 'rb'))
            except TypeError:
                pass
            except Exception as e:
                print(e)


def registration(message):  # –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
    user_data = message.text
    try:
        user_name = user_data.split()[0]
        user_key = user_data.split()[1]
        conn = sqlite3.connect(conn_path)
        cur = conn.cursor()
        query = f"SELECT user_type FROM user WHERE username='{user_name}' AND telegram_key='{user_key}'"
        user_type = cur.execute(query).fetchone()
        user_is_exist = bool(user_type)
        conn.close()
        if user_is_exist:
            if user_type[0] == 1:
                updater_id(message.chat.id, user_name, user_key)
                bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ!', reply_markup=user_keyboard)
            elif user_type[0] == 2:
                updater_id(message.chat.id, user_name, user_key)
                bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ!',
                                 reply_markup=min_user_keyboard)
            elif user_type[0] == 3:
                bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
        else:
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...')
            bot.register_next_step_handler(message, registration)
    except Exception:
        bot.send_message(message.chat.id, '–í—ã –∑–∞–±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏–ª–∏ –∫–ª—é—á!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...')


def updater_id(chat_id, login_data, code_data):
    conn = sqlite3.connect(conn_path)
    cur = conn.cursor()
    sql = f"UPDATE user SET chat_id_telegram = '{chat_id}' WHERE username = '{login_data}' " \
          f"AND telegram_key = '{code_data}'"
    cur.execute(sql)
    conn.commit()
    conn.close()


if __name__ == '__main__':
    from CamDetect import Detector

    cam = Detector()
    bot.polling()
